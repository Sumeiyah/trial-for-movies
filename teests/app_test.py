
# Generated by CodiumAI

import pytest

class TestCodeUnderTest:

    # User successfully registers with valid credentials
    def test_register_success(self):
        data = {
            'username': 'test_user',
            'password': 'test_password',
            'email': 'test@example.com'
        }
        response = code_under_test.register(data)
        assert response.status_code == 201
        assert response.json() == {'message': 'Registration Successful!'}

    # User successfully logs in with valid credentials
    def test_login_success(self):
        data = {
            'username': 'test_user',
            'password': 'test_password'
        }
        response = code_under_test.login(data)
        assert response.status_code == 200
        assert response.json() == {'message': 'Login Successful!'}

    # User successfully views their own profile
    def test_view_own_profile(self):
        user_id = 1
        response = code_under_test.profile(user_id)
        assert response.status_code == 200
        assert response.json() == {
            'UserID': user_id,
            'Username': 'test_user',
            'Email': 'test@example.com',
            'ProfilePicture': 'https://i.stack.imgur.com/34AD2.jpg',
            'Bio': "Hey there i'm a New flick-feeds User!",
            'ContactDetails': None
        }

    # User attempts to register with missing credentials
    def test_register_missing_credentials(self):
        data = {
            'username': 'test_user',
            'email': 'test@example.com'
        }
        response = code_under_test.register(data)
        assert response.status_code == 400
        assert response.json() == {'message': 'Missing password'}

    # User attempts to register with an existing username or email
    def test_register_existing_credentials(self):
        data = {
            'username': 'test_user',
            'password': 'test_password',
            'email': 'test@example.com'
        }
        response = code_under_test.register(data)
        assert response.status_code == 409
        assert response.json() == {'message': 'Username or email already exists'}